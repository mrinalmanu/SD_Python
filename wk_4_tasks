#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed May 5 01:20:51 2019

@author: manu
"""
import json

relations = json.loads('[{"name": "A", "parents": []}, {"name": "B", "parents":["A", "C"]}, {"name": "C" , "parents": ["A"]}]')


''' class containing function to dicover parents of a class'''
class Discover():
    
    def __init__(self, relations):
        
        self.relations = relations
    
    def parents(self, relations):
        
        findings = dict()

        for ch in relations:

            if len(ch["parents"]) > 0:
                for elem in ch["parents"]:
                    if elem not in findings:
                        findings[elem] = [ch["name"]]
                    else:
                        findings[elem].append(ch["name"])
                        

        return findings



""" Depth first search """

def dfs_all(d, start):
        
        viz = dict.fromkeys(nodes_all, False)

        def dfs(node):
            viz[node] = True
            if node in d:
                for ch in d[node]:
                    if not viz[ch]:
                        dfs(ch)
        dfs(start)

        return sum(viz.values())
    
    
#______________________
        
on_this = Discover(relations).parents(relations)

message = 'Parents: Children :: {} {}'.format(on_this.keys(), on_this.values())
print(message)

#______________________
    
final_sum = dict()

nodes_all = [n["name"] for n in relations]
nodes_all.sort()

for start in nodes_all:
    final_sum[start] = dfs_all(on_this, start)

print(final_sum)

